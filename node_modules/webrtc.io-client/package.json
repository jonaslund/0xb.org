{
  "name": "webrtc.io-client",
  "version": "0.0.2-3",
  "description": "Drop-in client code for webrtc.io",
  "repository": {
    "type": "git",
    "url": "git://github.com/sarenji/webrtc.io-client.git"
  },
  "main": "./lib/io.js",
  "keywords": [
    "webrtc"
  ],
  "author": {
    "name": "David Peter",
    "email": "david.a.peter@gmail.com"
  },
  "contributors": [
    {
      "name": "David Peter",
      "email": "david.a.peter@gmail.com"
    },
    {
      "name": "Ben Brittain",
      "email": "ben@brittain.org"
    },
    {
      "name": "Dennis MÃ¥rtensson",
      "email": "me@dennis.is"
    }
  ],
  "license": "MIT",
  "readme": "# webrtc.io\n\nA library that is to webRTC like socket.io is to WebSockets.\n\nThis will eventually be bundled with the [server code](https://github.com/cavedweller/webRTC.io).\n\n## Installation\n\nCurrently, webrtc.io depends on socket.io, so include the socket.io client as well. After including socket.io-client, drop in `lib/io.js`. You'll also need a webrtc.io server running.\n\nNow you can start using webRTC commands with our abstraction.\n\n\n## Usage\n\n```javascript\nrtc.createStream({\"video\": true, \"audio\":true}, function(stream){\n  // get local stream for manipulation\n}\nrtc.connect('ws://yourserveraddress:8001', optionalRoom);\n//then a bunch of callbacks are available\n```\n\nYou can set the STUN server by calling \nrtc.SERVER = \"STUN stun.l.google.com:19302\" and set your server. The default STUN server used by the library is one from google.\n",
  "_id": "webrtc.io-client@0.0.2-3",
  "dist": {
    "shasum": "7fe3587a0eb5e3d614f0f5e980a56160c3555bb9"
  },
  "_from": "webrtc.io-client@latest"
}
